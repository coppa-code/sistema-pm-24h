// server.js - Sistema PM OTIMIZADO - SUPORTE DUPLO FORMATO + LIMITE TWILIO - v2.4.0
const express = require('express');
const cron = require('node-cron');

const app = express();
const PORT = process.env.PORT || 3000;

// ‚öôÔ∏è CONFIGURA√á√ïES 
const CONFIG = {
    firebase: {
        apiKey: process.env.FIREBASE_API_KEY || "AIzaSyACqmiKFVEbm-P1tCVmYXl-B5a-wum2XPQ",
        authDomain: process.env.FIREBASE_AUTH_DOMAIN || "aniversario-dcdd8.firebaseapp.com",
        projectId: process.env.FIREBASE_PROJECT_ID || "aniversario-dcdd8",
        storageBucket: process.env.FIREBASE_STORAGE_BUCKET || "aniversario-dcdd8.firebasestorage.app",
        messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID || "848233635514",
        appId: process.env.FIREBASE_APP_ID || "1:848233635514:web:352f8de44f58ca86f7ec83"
    },
    twilio: {
        accountSid: process.env.TWILIO_ACCOUNT_SID || 'ACbdbb222bea4e9a291bf7b7fe53ed07c1',
        authToken: process.env.TWILIO_AUTH_TOKEN || 'fc025f744ef00c1986053eac8fd183ee',
        fromNumber: process.env.TWILIO_FROM_NUMBER || 'whatsapp:+14155238886',
        toNumber: process.env.TWILIO_TO_NUMBER || 'whatsapp:+557181478028'
    },
    notification: {
        timing: process.env.NOTIFICATION_TIMING || '1-day',
        sendTime: process.env.NOTIFICATION_TIME || '10:50-10:55'
    },
    keepAlive: {
        enabled: process.env.KEEP_ALIVE_ENABLED !== 'false',
        interval: 10 * 60 * 1000 // 10 minutos
    }
};

// üõ°Ô∏è CONTROLE DE LIMITE DI√ÅRIO E TWILIO
let dailyMessageCount = 0;
const MAX_DAILY_MESSAGES = 3; // ‚ö†Ô∏è REDUZIDO PARA EVITAR LIMITE TWILIO
let twilioLimitReached = false;

// üî• INICIALIZAR FIREBASE
let db = null;
let firebaseModules = null;

async function initializeFirebase() {
    try {
        const { initializeApp } = await import('firebase/app');
        const { getFirestore, collection, getDocs, query, orderBy } = await import('firebase/firestore');
        
        firebaseModules = { collection, getDocs, query, orderBy };
        
        const firebaseApp = initializeApp(CONFIG.firebase);
        db = getFirestore(firebaseApp);
        
        console.log('üî• Firebase conectado com sucesso!');
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao conectar Firebase:', error);
        return false;
    }
}

// üîÑ SISTEMA KEEP-ALIVE
function startKeepAlive() {
    if (!CONFIG.keepAlive.enabled) {
        console.log('üîÑ Keep-alive desabilitado');
        return;
    }

    setInterval(async () => {
        try {
            console.log(`üîÑ Keep-alive ativo - ${new Date().toLocaleTimeString('pt-BR', { timeZone: 'America/Sao_Paulo' })}`);
            // Limpar cache de mem√≥ria
            if (global.gc) {
                global.gc();
            }
        } catch (error) {
            console.log(`üîÑ Keep-alive erro: ${error.message}`);
        }
    }, CONFIG.keepAlive.interval);
    
    console.log(`üîÑ Keep-alive iniciado: ping a cada ${CONFIG.keepAlive.interval/1000/60} minutos`);
}

// üì± FUN√á√ÉO OTIMIZADA COM CONTROLE DE LIMITE TWILIO
async function sendWhatsAppMessage(to, message) {
    // ‚úÖ VERIFICAR SE J√Å ATINGIU LIMITE TWILIO
    if (twilioLimitReached) {
        console.log(`üö´ LIMITE TWILIO ATINGIDO - Mensagem n√£o enviada para economizar`);
        throw new Error('Limite Twilio atingido - Mensagem bloqueada para economizar');
    }

    if (dailyMessageCount >= MAX_DAILY_MESSAGES) {
        console.log(`‚ö†Ô∏è LIMITE DI√ÅRIO INTERNO ATINGIDO: ${dailyMessageCount}/${MAX_DAILY_MESSAGES}`);
        throw new Error(`Limite di√°rio interno atingido (${dailyMessageCount}/${MAX_DAILY_MESSAGES})`);
    }

    try {
        let fetch;
        
        try {
            fetch = globalThis.fetch;
            if (!fetch) {
                const nodeFetch = await import('node-fetch');
                fetch = nodeFetch.default || nodeFetch;
            }
        } catch (error) {
            console.error('‚ùå Erro ao importar fetch:', error);
            throw new Error('Fetch n√£o dispon√≠vel');
        }

        const url = `https://api.twilio.com/2010-04-01/Accounts/${CONFIG.twilio.accountSid}/Messages.json`;
        const toNumber = to.startsWith('whatsapp:') ? to : `whatsapp:${to}`;
        
        console.log('üì§ Enviando mensagem WhatsApp...');
        console.log(`üìû Para: ${toNumber}`);
        console.log(`üìù Tamanho: ${message.length} caracteres`);
        
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Authorization': 'Basic ' + Buffer.from(`${CONFIG.twilio.accountSid}:${CONFIG.twilio.authToken}`).toString('base64'),
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams({
                From: CONFIG.twilio.fromNumber,
                To: toNumber,
                Body: message
            })
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Resposta Twilio:', response.status, errorText);
            
            // ‚úÖ DETECTAR LIMITE TWILIO E MARCAR FLAG
            if (response.status === 429 || errorText.includes('63038')) {
                twilioLimitReached = true;
                console.error('üö´ LIMITE TWILIO DETECTADO - Bloqueando pr√≥ximas tentativas');
            }
            
            throw new Error(`Twilio Error ${response.status}: ${errorText}`);
        }

        const result = await response.json();
        
        dailyMessageCount++;
        console.log(`‚úÖ WhatsApp enviado com sucesso!`);
        console.log(`üìä Mensagens hoje: ${dailyMessageCount}/${MAX_DAILY_MESSAGES}`);
        console.log(`üÜî SID: ${result.sid}`);
        
        return result;
        
    } catch (error) {
        console.error('‚ùå Erro detalhado no envio WhatsApp:', error);
        
        if (error.message.includes('63038') || error.message.includes('429')) {
            twilioLimitReached = true;
            console.error('üö´ LIMITE TWILIO ATINGIDO - Bloqueando pr√≥ximas tentativas');
        }
        
        throw error;
    }
}

// üìÖ BUSCAR ANIVERS√ÅRIOS DO FIREBASE
async function getBirthdaysFromFirebase() {
    try {
        if (!db || !firebaseModules) {
            console.log('‚ùå Firebase n√£o inicializado');
            return [];
        }

        const { collection, getDocs, query, orderBy } = firebaseModules;
        const q = query(collection(db, 'birthdays'), orderBy('createdAt', 'desc'));
        const querySnapshot = await getDocs(q);
        
        const birthdays = [];
        querySnapshot.forEach((doc) => {
            const data = doc.data();
            birthdays.push({
                id: doc.id,
                name: data.name || 'Nome n√£o informado',
                graduation: data.graduation || 'Gradua√ß√£o n√£o informada',
                date: data.date || '',
                phone: data.phone || 'Telefone n√£o informado',
                relationship: data.relationship || 'Relacionamento n√£o informado',
                unit: data.unit || ''
            });
        });

        console.log(`‚úÖ Firebase: ${birthdays.length} anivers√°rios carregados`);
        return birthdays;
    } catch (error) {
        console.error('‚ùå Erro ao buscar anivers√°rios:', error);
        return [];
    }
}

// üßÆ CALCULAR IDADE SEGURA - SUPORTA AMBOS OS FORMATOS
function calculateAge(dateString) {
    try {
        if (!dateString || dateString.trim() === '') {
            console.log(`‚ö†Ô∏è Data vazia para c√°lculo de idade`);
            return 0;
        }
        
        let day, month, year;
        
        // ‚úÖ DETECTAR FORMATO DA DATA
        if (dateString.includes('/')) {
            // Formato brasileiro: DD/MM/YYYY
            const dateParts = dateString.split('/');
            if (dateParts.length < 3) {
                console.log(`‚ö†Ô∏è Data brasileira incompleta: ${dateString}`);
                return 0;
            }
            [day, month, year] = dateParts;
        } else if (dateString.includes('-')) {
            // Formato americano: YYYY-MM-DD
            const dateParts = dateString.split('-');
            if (dateParts.length < 3) {
                console.log(`‚ö†Ô∏è Data americana incompleta: ${dateString}`);
                return 0;
            }
            [year, month, day] = dateParts;
        } else {
            console.log(`‚ö†Ô∏è Formato de data n√£o reconhecido: ${dateString}`);
            return 0;
        }
        
        if (!day || !month || !year) {
            console.log(`‚ö†Ô∏è Partes da data vazias: ${dateString}`);
            return 0;
        }
        
        const birth = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
        const today = new Date();
        
        // Verificar se a data √© v√°lida
        if (isNaN(birth.getTime())) {
            console.log(`‚ö†Ô∏è Data inv√°lida ap√≥s convers√£o: ${dateString}`);
            return 0;
        }
        
        let age = today.getFullYear() - birth.getFullYear();
        const monthDiff = today.getMonth() - birth.getMonth();
        
        if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
            age--;
        }
        
        return age > 0 ? age : 0;
    } catch (error) {
        console.error(`‚ùå Erro ao calcular idade para "${dateString}":`, error.message);
        return 0;
    }
}

// üìÖ VERIFICAR QUEM FAZ ANIVERS√ÅRIO AMANH√É - SUPORTA AMBOS OS FORMATOS
function checkTomorrowBirthdays(birthdays) {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    const tomorrowDay = tomorrow.getDate().toString().padStart(2, '0');
    const tomorrowMonth = (tomorrow.getMonth() + 1).toString().padStart(2, '0');
    
    console.log(`üîç Verificando anivers√°rios para AMANH√É: ${tomorrowDay}/${tomorrowMonth}`);
    
    const tomorrowBirthdays = birthdays.filter(birthday => {
        try {
            if (!birthday || !birthday.date || birthday.date.trim() === '') {
                console.log(`‚ö†Ô∏è Data vazia para: ${birthday?.name || 'Nome n√£o informado'}`);
                return false;
            }
            
            let day, month;
            
            // ‚úÖ DETECTAR E PROCESSAR FORMATO DA DATA
            if (birthday.date.includes('/')) {
                // Formato brasileiro: DD/MM/YYYY
                const dateParts = birthday.date.split('/');
                if (dateParts.length < 2) {
                    console.log(`‚ö†Ô∏è Data brasileira incompleta para ${birthday.name}: ${birthday.date}`);
                    return false;
                }
                day = dateParts[0];
                month = dateParts[1];
            } else if (birthday.date.includes('-')) {
                // Formato americano: YYYY-MM-DD
                const dateParts = birthday.date.split('-');
                if (dateParts.length < 3) {
                    console.log(`‚ö†Ô∏è Data americana incompleta para ${birthday.name}: ${birthday.date}`);
                    return false;
                }
                // YYYY-MM-DD -> extrair MM e DD
                month = dateParts[1]; // MM
                day = dateParts[2];   // DD
            } else {
                console.log(`‚ö†Ô∏è Formato de data n√£o reconhecido para ${birthday.name}: ${birthday.date}`);
                return false;
            }
            
            if (!day || !month || day.trim() === '' || month.trim() === '') {
                console.log(`‚ö†Ô∏è Dia ou m√™s vazio para ${birthday.name}: ${birthday.date}`);
                return false;
            }
            
            const birthdayDay = day.toString().trim().padStart(2, '0');
            const birthdayMonth = month.toString().trim().padStart(2, '0');
            
            const match = birthdayDay === tomorrowDay && birthdayMonth === tomorrowMonth;
            
            if (match) {
                console.log(`üéÇ ENCONTRADO: ${birthday.graduation || 'Sem gradua√ß√£o'} ${birthday.name || 'Sem nome'} - ${birthday.date} (${birthday.date.includes('/') ? 'BR' : 'US'} format)`);
            }
            
            return match;
            
        } catch (error) {
            console.error(`‚ùå Erro ao processar anivers√°rio de ${birthday.name || 'Nome desconhecido'}:`, error.message);
            return false;
        }
    });
    
    console.log(`üìä Total de anivers√°rios AMANH√É: ${tomorrowBirthdays.length}`);
    return tomorrowBirthdays;
}

// üí¨ FUN√á√ÉO CRIAR MENSAGEM √öNICA OTIMIZADA
function createCombinedBirthdayMessage(birthdays, periodo = 'padr√£o') {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    const periodoEmoji = periodo === '10:50' ? 'üåô' : 
                        periodo === '10:55' ? 'üåÖ' : 'üéÇ';
    
    const periodoTexto = periodo === '10:50' ? '(Lembrete 10:50h)' : 
                        periodo === '10:55' ? '(Lembrete 10:55h)' : 
                        '(Lembrete Autom√°tico)';
    
    const birthdayList = birthdays.map((birthday, index) => {
        const nextAge = calculateAge(birthday.date) + 1;
        const ageText = nextAge > 0 ? `${nextAge} anos` : 'Idade n√£o calculada';
        
        return `${index + 1}. üéñÔ∏è *${birthday.graduation || 'Sem gradua√ß√£o'} ${birthday.name || 'Sem nome'}*
   üéà Far√°: ${ageText}
   üìû Tel: ${birthday.phone || 'N√£o informado'}
   üë• ${birthday.relationship || 'N√£o informado'}
   ${birthday.unit ? `üè¢ ${birthday.unit}` : ''}`;
    }).join('\n\n');
    
    return `${periodoEmoji} *LEMBRETES DE ANIVERS√ÅRIO PM* üéñÔ∏è
${periodoTexto}

üìÖ *AMANH√É* - ${tomorrow.toLocaleDateString('pt-BR')}
üéÇ *Total:* ${birthdays.length} aniversariante(s)

${birthdayList}

üéÅ *N√ÉO ESQUE√áA DE PARABENIZAR TODOS AMANH√É!*
üíê *Sugest√µes:* Liga√ß√£o, mensagem, presente ou visita

---
_Sistema PM 24/7 - ${periodo}h Brasil_ üéñÔ∏è
_${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}_`;
}

// ü§ñ EXECU√á√ÉO PRINCIPAL OTIMIZADA COM CONTROLE DE LIMITE
async function executeAutomaticCheck(periodo = 'padr√£o') {
    const brasilTime = new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' });
    console.log(`üéñÔ∏è === EXECU√á√ÉO AUTOM√ÅTICA PM (${periodo.toUpperCase()}) === ${brasilTime}`);
    
    // ‚úÖ VERIFICAR SE LIMITE TWILIO FOI ATINGIDO
    if (twilioLimitReached) {
        console.log(`üö´ EXECU√á√ÉO CANCELADA - Limite Twilio atingido (${periodo})`);
        return;
    }
    
    try {
        const allBirthdays = await getBirthdaysFromFirebase();
        
        if (allBirthdays.length === 0) {
            console.log('üìã Nenhum anivers√°rio encontrado no Firebase');
            return;
        }
        
        const tomorrowBirthdays = checkTomorrowBirthdays(allBirthdays);
        
        if (tomorrowBirthdays.length === 0) {
            console.log(`‚ÑπÔ∏è Nenhum anivers√°rio AMANH√É (${periodo})`);
            
            // ‚úÖ REMOVER TESTE DE FIM DE SEMANA PARA ECONOMIZAR MENSAGENS
            console.log(`üí° Nenhuma mensagem enviada - Economizando limite Twilio`);
            return;
        }
        
        // ‚úÖ ENVIAR MENSAGEM APENAS SE HOUVER ANIVERS√ÅRIOS
        console.log(`üéÇ ENVIANDO 1 MENSAGEM √öNICA com ${tomorrowBirthdays.length} aniversariante(s)...`);
        
        const combinedMessage = createCombinedBirthdayMessage(tomorrowBirthdays, periodo);
        const result = await sendWhatsAppMessage(CONFIG.twilio.toNumber, combinedMessage);
        
        console.log(`‚úÖ MENSAGEM √öNICA ENVIADA - SID: ${result.sid}`);
        console.log(`üéÇ Aniversariantes: ${tomorrowBirthdays.map(b => `${b.graduation || 'Sem gradua√ß√£o'} ${b.name || 'Sem nome'}`).join(', ')}`);
        
        console.log(`üìä RELAT√ìRIO FINAL (${periodo}):`);
        console.log(`   ‚úÖ Mensagem enviada: 1`);
        console.log(`   üéÇ Aniversariantes: ${tomorrowBirthdays.length}`);
        console.log(`   üí∞ Economia: ${tomorrowBirthdays.length - 1} mensagens poupadas`);
        console.log(`   üìä Mensagens hoje: ${dailyMessageCount}/${MAX_DAILY_MESSAGES}`);
        
    } catch (error) {
        console.error(`‚ùå Erro na execu√ß√£o autom√°tica (${periodo}):`, error.message);
        
        // ‚úÖ N√ÉO ENVIAR ALERTA DE ERRO SE LIMITE TWILIO ATINGIDO
        if (twilioLimitReached || error.message.includes('Limite Twilio atingido')) {
            console.log(`üö´ Alerta de erro n√£o enviado - Limite Twilio atingido`);
            return;
        }
        
        // Tentar enviar erro apenas se ainda h√° limite
        try {
            if (dailyMessageCount < MAX_DAILY_MESSAGES) {
                const errorMessage = `‚ùå *ERRO SISTEMA PM* üö®

‚è∞ *Hor√°rio:* ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}
üîß *Per√≠odo:* ${periodo}
‚ö†Ô∏è *Erro:* ${error.message}

üí° *Verificar logs no Render para mais detalhes*

---
_Sistema PM - Alerta de Erro v2.4.0_ ‚ö†Ô∏è`;

                await sendWhatsAppMessage(CONFIG.twilio.toNumber, errorMessage);
            }
        } catch (e) {
            console.error('‚ùå Erro ao enviar alerta de erro:', e);
        }
    }
}

// üïò CONFIGURAR CRON JOBS (10:50 e 10:55 Brasil no Render UTC)
console.log('‚è∞ Configurando cron jobs para 10:50 e 10:55 Brasil...');

// 10:50 Brasil = 12:20 UTC - Verifica√ß√£o 1
cron.schedule('50 13 * * *', () => {
    const brasilTime = new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' });
    console.log(`üåô EXECU√á√ÉO 10:50 BRASIL (12:20 UTC) - ${brasilTime}`);
    executeAutomaticCheck('10:50');
}, {
    timezone: "UTC"
});

// 10:55 Brasil = 12:25 UTC - Verifica√ß√£o 2
cron.schedule('55 13 * * *', () => {
    const brasilTime = new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' });
    console.log(`üåÖ EXECU√á√ÉO 10:55 BRASIL (12:25 UTC) - ${brasilTime}`);
    executeAutomaticCheck('10:55');
}, {
    timezone: "UTC"
});

// Reset contador di√°rio e flag Twilio √†s 00:00 UTC
cron.schedule('0 0 * * *', () => {
    dailyMessageCount = 0;
    twilioLimitReached = false; // ‚úÖ RESETAR FLAG TWILIO
    console.log('üîÑ Contador de mensagens e flag Twilio resetados para novo dia');
}, {
    timezone: "UTC"
});

console.log(`‚è∞ Cron jobs configurados para Render (UTC):`);
console.log(`   üåô 12:20 UTC = 10:50 Brasil (Verifica√ß√£o 1)`);
console.log(`   üåÖ 12:25 UTC = 10:55 Brasil (Verifica√ß√£o 2)`);
console.log(`   üîÑ 00:00 UTC = Reset contador di√°rio + flag Twilio`);

// üåê ROTAS WEB
app.use(express.json());

// Rota para keep-alive
app.get('/ping', (req, res) => {
    res.json({ 
        status: 'alive', 
        timestamp: new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }),
        utc: new Date().toISOString(),
        uptime: process.uptime(),
        keepAlive: CONFIG.keepAlive.enabled,
        memory: process.memoryUsage(),
        timezone: 'America/Sao_Paulo',
        renderTimezone: 'UTC',
        version: '2.4.0',
        optimization: 'Uma mensagem por hor√°rio + Controle Twilio',
        dailyMessages: `${dailyMessageCount}/${MAX_DAILY_MESSAGES}`,
        twilioLimitReached: twilioLimitReached
    });
});

// P√°gina principal ATUALIZADA
app.get('/', async (req, res) => {
    const uptime = Math.floor(process.uptime());
    const hours = Math.floor(uptime / 3600);
    const minutes = Math.floor((uptime % 3600) / 60);
    
    // Buscar dados do Firebase para mostrar na p√°gina
    let birthdayInfo = '';
    try {
        const birthdays = await getBirthdaysFromFirebase();
        const tomorrowBirthdays = checkTomorrowBirthdays(birthdays);
        
        if (tomorrowBirthdays.length > 0) {
            birthdayInfo = `
                <div style="background: #fff3cd; border: 2px solid #ffc107; padding: 15px; margin: 20px 0; border-radius: 5px;">
                    <h3>üéÇ ANIVERS√ÅRIOS AMANH√É (${tomorrowBirthdays.length})</h3>
                    ${tomorrowBirthdays.map(b => `
                        <p>üéñÔ∏è <strong>${b.graduation || 'Sem gradua√ß√£o'} ${b.name || 'Sem nome'}</strong> - ${calculateAge(b.date) + 1} anos</p>
                        <p style="margin-left: 20px; color: #666;">üìû ${b.phone || 'Tel n√£o informado'} | üè¢ ${b.unit || 'Unidade n√£o informada'}</p>
                        <p style="margin-left: 20px; color: #888; font-size: 12px;">üìÖ Data: ${b.date} (${b.date.includes('/') ? 'Formato BR' : 'Formato US'})</p>
                    `).join('')}
                </div>
            `;
        } else {
            birthdayInfo = `
                <div style="background: #d4edda; padding: 15px; margin: 20px 0; border-radius: 5px;">
                    <p>üìÖ <strong>Nenhum anivers√°rio amanh√£</strong> - Sistema funcionando normalmente</p>
                    <p>üìã Total no banco: ${birthdays.length} anivers√°rios</p>
                    <p>üìä Formatos detectados: ${birthdays.filter(b => b.date && b.date.includes('/')).length} BR (DD/MM/YYYY) | ${birthdays.filter(b => b.date && b.date.includes('-')).length} US (YYYY-MM-DD)</p>
                </div>
            `;
        }
    } catch (error) {
        birthdayInfo = `
            <div style="background: #f8d7da; padding: 15px; margin: 20px 0; border-radius: 5px;">
                <p>‚ùå <strong>Erro ao conectar Firebase:</strong> ${error.message}</p>
            </div>
        `;
    }
    
    res.send(`
        <!DOCTYPE html>
        <html>
        <head>
            <title>Sistema PM 24/7 v2.4.0 - DUAL FORMAT + TWILIO CONTROL</title>
            <meta charset="UTF-8">
            <style>
                body { font-family: Arial, sans-serif; max-width: 900px; margin: 50px auto; padding: 20px; }
                .header { text-align: center; background: #007bff; color: white; padding: 20px; border-radius: 10px; }
                .status { background: #d4edda; padding: 15px; margin: 20px 0; border-radius: 5px; }
                .endpoint { background: #f8f9fa; padding: 10px; margin: 10px 0; border-radius: 5px; }
                a { color: #007bff; text-decoration: none; }
                a:hover { text-decoration: underline; }
                .executions { background: #e7f3ff; padding: 15px; margin: 15px 0; border-radius: 5px; }
                .timezone { background: #fff3cd; padding: 10px; margin: 10px 0; border-radius: 5px; }
                .optimization { background: #d1ecf1; padding: 15px; margin: 15px 0; border-radius: 5px; border: 2px solid #bee5eb; }
                .twilio-alert { background: ${twilioLimitReached ? '#f8d7da' : '#d4edda'}; padding: 15px; margin: 15px 0; border-radius: 5px; border: 2px solid ${twilioLimitReached ? '#dc3545' : '#28a745'}; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üéñÔ∏è Sistema PM 24/7 v2.4.0 - DUAL FORMAT!</h1>
                <p>Sistema de Anivers√°rios da Pol√≠cia Militar</p>
                <p><strong>üí∞ UMA MENSAGEM POR HOR√ÅRIO + CONTROLE TWILIO</strong></p>
            </div>
            
            <div class="twilio-alert">
                <h3>${twilioLimitReached ? 'üö´ LIMITE TWILIO ATINGIDO' : '‚úÖ TWILIO FUNCIONANDO'}:</h3>
                <ul>
                    <li><strong>Status:</strong> ${twilioLimitReached ? 'BLOQUEADO at√© 00:00 UTC' : 'Operacional'}</li>
                    <li><strong>Mensagens hoje:</strong> ${dailyMessageCount}/${MAX_DAILY_MESSAGES}</li>
                    <li><strong>Limite interno:</strong> ${MAX_DAILY_MESSAGES} mensagens/dia</li>
                    <li><strong>Reset autom√°tico:</strong> 00:00 UTC (21:00 Brasil)</li>
                </ul>
            </div>
            
            <div class="optimization">
                <h3>üîÑ MELHORIAS v2.4.0:</h3>
                <ul>
                    <li>‚úÖ <strong>Suporte duplo formato:</strong> DD/MM/YYYY (BR) e YYYY-MM-DD (US)</li>
                    <li>‚úÖ <strong>Controle rigoroso Twilio:
                                        <li>‚úÖ <strong>Controle rigoroso Twilio:</strong> Flag de bloqueio quando limite atingido</li>
                    <li>‚úÖ <strong>Limite interno reduzido:</strong> 3 mensagens/dia (seguran√ßa extra)</li>
                    <li>‚úÖ <strong>Economia m√°xima:</strong> 1 mensagem por hor√°rio (independente da quantidade)</li>
                    <li>‚úÖ <strong>Reset autom√°tico:</strong> Contador e flags zerados √†s 00:00 UTC</li>
                    <li>‚úÖ <strong>Detec√ß√£o inteligente:</strong> Reconhece automaticamente formato da data</li>
                    <li>‚úÖ <strong>Sem testes desnecess√°rios:</strong> S√≥ envia se houver anivers√°rios</li>
                </ul>
            </div>
            
            <div class="status">
                <h3>üìä STATUS ATUAL:</h3>
                <ul>
                    <li><strong>üïê Hor√°rio Brasil:</strong> ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}</li>
                    <li><strong>üåç Hor√°rio UTC:</strong> ${new Date().toISOString()}</li>
                    <li><strong>‚è±Ô∏è Uptime:</strong> ${hours}h ${minutes}m</li>
                    <li><strong>üî• Firebase:</strong> ${db ? 'Conectado ‚úÖ' : 'Desconectado ‚ùå'}</li>
                    <li><strong>üì± WhatsApp:</strong> ${CONFIG.twilio.toNumber}</li>
                    <li><strong>üîÑ Keep-alive:</strong> ${CONFIG.keepAlive.enabled ? 'Ativo ‚úÖ' : 'Desativo ‚ùå'}</li>
                </ul>
            </div>
            
            ${birthdayInfo}
            
            <div class="timezone">
                <h3>‚è∞ HOR√ÅRIOS DE EXECU√á√ÉO:</h3>
                <ul>
                    <li><strong>üåô 10:50 Brasil</strong> = 12:20 UTC (Verifica√ß√£o 1)</li>
                    <li><strong>üåÖ 10:55 Brasil</strong> = 12:25 UTC (Verifica√ß√£o 2)</li>
                    <li><strong>üîÑ Reset di√°rio</strong> = 00:00 UTC = 21:00 Brasil</li>
                </ul>
            </div>
            
            <div class="executions">
                <h3>üéØ COMO FUNCIONA A OTIMIZA√á√ÉO:</h3>
                <ul>
                    <li><strong>üìä M√∫ltiplos anivers√°rios:</strong> 1 mensagem √∫nica com todos os nomes</li>
                    <li><strong>üí∞ Economia exemplo:</strong> 5 anivers√°rios = 1 mensagem (4 poupadas)</li>
                    <li><strong>üéÇ Formato da mensagem:</strong> Gradua√ß√£o + Nome + Idade + Telefone + Unidade</li>
                    <li><strong>‚è∞ Dois hor√°rios:</strong> 10:50 e 10:55 (m√°ximo 2 mensagens/dia)</li>
                    <li><strong>üö´ Sem anivers√°rios:</strong> Nenhuma mensagem enviada (economia total)</li>
                </ul>
            </div>
            
            <h3>üîó ENDPOINTS DISPON√çVEIS:</h3>
            <div class="endpoint"><a href="/test">üß™ /test</a> - Teste geral com dados reais</div>
            <div class="endpoint"><a href="/test-0920">üåô /test-0920</a> - Testar execu√ß√£o 10:50</div>
            <div class="endpoint"><a href="/test-0925">üåÖ /test-0925</a> - Testar execu√ß√£o 10:55</div>
            <div class="endpoint"><a href="/birthdays">üìã /birthdays</a> - Ver todos os anivers√°rios</div>
            <div class="endpoint"><a href="/check">üîç /check</a> - Verifica√ß√£o manual</div>
            <div class="endpoint"><a href="/status">üìä /status</a> - Status JSON completo</div>
            <div class="endpoint"><a href="/ping">üîÑ /ping</a> - Keep-alive + info sistema</div>
            <div class="endpoint"><a href="/debug">üîç /debug</a> - Debug completo Firebase + formatos</div>
            
            <hr>
            <p><small>üí° <strong>Sistema integrado:</strong> Firebase + Twilio + Render FREE funcionando 24/7</small></p>
            <p><small>üîß <strong>Vers√£o:</strong> 2.4.0 - Dual Format + Twilio Control</small></p>
            <p><small>üí∞ <strong>Economia:</strong> M√°xima efici√™ncia + Controle rigoroso de limite</small></p>
            <p><small>üìÖ <strong>Formatos suportados:</strong> DD/MM/YYYY (Brasil) e YYYY-MM-DD (Americano)</small></p>
        </body>
        </html>
    `);
});

// Endpoint para teste geral OTIMIZADO
app.get('/test', async (req, res) => {
    try {
        // ‚úÖ VERIFICAR LIMITE TWILIO ANTES DO TESTE
        if (twilioLimitReached) {
            return res.status(429).json({
                success: false,
                error: 'Limite Twilio atingido - Teste bloqueado at√© reset (00:00 UTC)',
                twilioStatus: 'BLOCKED',
                resetTime: '00:00 UTC (21:00 Brasil)',
                dailyCount: `${dailyMessageCount}/${MAX_DAILY_MESSAGES}`,
                version: '2.4.0'
            });
        }

        // Buscar dados do Firebase para incluir no teste
        const birthdays = await getBirthdaysFromFirebase();
        const tomorrowBirthdays = checkTomorrowBirthdays(birthdays);
        
        // Contar formatos de data
        const brFormats = birthdays.filter(b => b.date && b.date.includes('/')).length;
        const usFormats = birthdays.filter(b => b.date && b.date.includes('-')).length;
        
        let testMessage;
        
        if (tomorrowBirthdays.length > 0) {
            // Se h√° anivers√°rios amanh√£, mostrar o formato real
            testMessage = createCombinedBirthdayMessage(tomorrowBirthdays, 'TESTE');
        } else {
            // Se n√£o h√° anivers√°rios, mostrar teste de funcionamento
            testMessage = `üß™ *TESTE SISTEMA PM v2.4.0* üéñÔ∏è

‚è∞ *Hor√°rio Brasil:* ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}
üïê *UTC (Render):* ${new Date().toISOString()}
üÜì *Plataforma:* Render FREE
üî• *Firebase:* ${db ? 'Conectado ‚úÖ' : 'Desconectado ‚ùå'}
üì± *WhatsApp:* Conectado via Twilio

üìä *Dados Atuais:*
‚Ä¢ üìã Total no banco: ${birthdays.length} anivers√°rios
‚Ä¢ üéÇ Amanh√£ (${new Date(Date.now() + 86400000).toLocaleDateString('pt-BR')}): ${tomorrowBirthdays.length} anivers√°rio(s)
‚Ä¢ üìÖ Formato BR (DD/MM/YYYY): ${brFormats}
‚Ä¢ üìÖ Formato US (YYYY-MM-DD): ${usFormats}

‚è∞ *Execu√ß√µes Autom√°ticas:*
‚Ä¢ üåô 10:50 Brasil (12:20 UTC) - Verifica√ß√£o 1
‚Ä¢ üåÖ 10:55 Brasil (12:25 UTC) - Verifica√ß√£o 2

üí∞ *OTIMIZA√á√ÉO v2.4.0:*
‚Ä¢ ‚úÖ Suporte duplo formato de data
‚Ä¢ ‚úÖ 1 mensagem por hor√°rio (economia m√°xima)
‚Ä¢ ‚úÖ Controle rigoroso limite Twilio
‚Ä¢ ‚úÖ Bloqueio autom√°tico se limite atingido

üìä *Status Twilio:*
‚Ä¢ Mensagens hoje: ${dailyMessageCount}/${MAX_DAILY_MESSAGES}
‚Ä¢ Status: ${twilioLimitReached ? 'BLOQUEADO' : 'OPERACIONAL'}
‚Ä¢ Reset: 00:00 UTC (21:00 Brasil)

‚úÖ *Sistema PM v2.4.0 funcionando perfeitamente!*

---
_Teste manual com dados reais e controle Twilio_ üöÄ`;
        }

        const result = await sendWhatsAppMessage(CONFIG.twilio.toNumber, testMessage);
        res.json({ 
            success: true, 
            message: 'Teste enviado com formato otimizado v2.4.0!', 
            sid: result.sid,
            firebase: {
                connected: db !== null,
                totalBirthdays: birthdays.length,
                tomorrowBirthdays: tomorrowBirthdays.length,
                formatsBR: brFormats,
                formatsUS: usFormats
            },
            optimization: {
                messagesWouldSend: tomorrowBirthdays.length || 1,
                messagesActuallySent: 1,
                messagesSaved: Math.max(0, tomorrowBirthdays.length - 1)
            },
            twilio: {
                dailyCount: `${dailyMessageCount}/${MAX_DAILY_MESSAGES}`,
                limitReached: twilioLimitReached,
                status: twilioLimitReached ? 'BLOCKED' : 'OPERATIONAL'
            },
            timestamp: new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }),
            version: '2.4.0 - Dual Format + Twilio Control'
        });
    } catch (error) {
        res.status(500).json({ 
            success: false, 
            error: error.message,
            twilioLimitReached: twilioLimitReached,
            dailyCount: `${dailyMessageCount}/${MAX_DAILY_MESSAGES}`,
            version: '2.4.0'
        });
    }
});

// Teste espec√≠fico para 10:50
app.get('/test-0920', async (req, res) => {
    try {
        if (twilioLimitReached) {
            return res.status(429).json({
                success: false,
                error: 'Limite Twilio atingido - Teste 10:50 bloqueado',
                twilioStatus: 'BLOCKED',
                resetTime: '00:00 UTC (21:00 Brasil)',
                version: '2.4.0'
            });
        }

        console.log('üß™ TESTE MANUAL 10:50 INICIADO...');
        await executeAutomaticCheck('10:50');
        res.json({ 
            success: true, 
            message: 'Teste 10:50 Brasil (12:20 UTC) executado com controle Twilio!',
            timestamp: new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }),
            utc: new Date().toISOString(),
            timezone: 'America/Sao_Paulo ‚Üí UTC',
            renderTime: '12:20 UTC',
            twilio: {
                dailyMessages: `${dailyMessageCount}/${MAX_DAILY_MESSAGES}`,
                limitReached: twilioLimitReached,
                status: twilioLimitReached ? 'BLOCKED' : 'OPERATIONAL'
            },
            version: '2.4.0'
        });
    } catch (error) {
        res.status(500).json({ 
            success: false, 
            error: error.message,
            twilioLimitReached: twilioLimitReached,
            dailyMessages: `${dailyMessageCount}/${MAX_DAILY_MESSAGES}`,
            version: '2.4.0'
        });
    }
});

// Teste espec√≠fico para 10:55
app.get('/test-0925', async (req, res) => {
    try {
        if (twilioLimitReached) {
            return res.status(429).json({
                success: false,
                error: 'Limite Twilio atingido - Teste 10:55 bloqueado',
                twilioStatus: 'BLOCKED',
                resetTime: '00:00 UTC (21:00 Brasil)',
                version: '2.4.0'
            });
        }

        console.log('üß™ TESTE MANUAL 10:55 INICIADO...');
        await executeAutomaticCheck('10:55');
        res.json({ 
            success: true, 
            message: 'Teste 10:55 Brasil (12:25 UTC) executado com controle Twilio!',
            timestamp: new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }),
            utc: new Date().toISOString(),
            timezone: 'America/Sao_Paulo ‚Üí UTC',
            renderTime: '12:25 UTC',
            twilio: {
                dailyMessages: `${dailyMessageCount}/${MAX_DAILY_MESSAGES}`,
                limitReached: twilioLimitReached,
                status: twilioLimitReached ? 'BLOCKED' : 'OPERATIONAL'
            },
            version: '2.4.0'
        });
    } catch (error) {
        res.status(500).json({ 
            success: false, 
            error: error.message,
            twilioLimitReached: twilioLimitReached,
            dailyMessages: `${dailyMessageCount}/${MAX_DAILY_MESSAGES}`,
            version: '2.4.0'
        });
    }
});

// Endpoint para verificar anivers√°rios manualmente
app.get('/check', async (req, res) => {
    try {
        if (twilioLimitReached) {
            return res.status(429).json({
                success: false,
                error: 'Limite Twilio atingido - Verifica√ß√£o manual bloqueada',
                twilioStatus: 'BLOCKED',
                resetTime: '00:00 UTC (21:00 Brasil)',
                version: '2.4.0'
            });
        }

        console.log('üîç VERIFICA√á√ÉO MANUAL INICIADA...');
        await executeAutomaticCheck('manual');
        res.json({ 
            success: true, 
            message: 'Verifica√ß√£o manual executada com formato otimizado v2.4.0!',
            timestamp: new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }),
            utc: new Date().toISOString(),
            twilio: {
                dailyMessages: `${dailyMessageCount}/${MAX_DAILY_MESSAGES}`,
                limitReached: twilioLimitReached,
                status: twilioLimitReached ? 'BLOCKED' : 'OPERATIONAL'
            },
            version: '2.4.0'
        });
    } catch (error) {
        res.status(500).json({ 
            success: false, 
            error: error.message,
            twilioLimitReached: twilioLimitReached,
            dailyMessages: `${dailyMessageCount}/${MAX_DAILY_MESSAGES}`,
            version: '2.4.0'
        });
    }
});

// Endpoint para listar todos os anivers√°rios
app.get('/birthdays', async (req, res) => {
    try {
        const birthdays = await getBirthdaysFromFirebase();
        const tomorrowBirthdays = checkTomorrowBirthdays(birthdays);
        
        // Contar formatos
        const brFormats = birthdays.filter(b => b.date && b.date.includes('/')).length;
        const usFormats = birthdays.filter(b => b.date && b.date.includes('-')).length;
        const invalidFormats = birthdays.filter(b => !b.date || (!b.date.includes('/') && !b.date.includes('-'))).length;
        
        res.json({
            success: true,
            total: birthdays.length,
            tomorrowCount: tomorrowBirthdays.length,
            formats: {
                brazilian: brFormats,
                american: usFormats,
                invalid: invalidFormats
            },
            tomorrow: tomorrowBirthdays.map(b => ({
                name: b.name || 'Sem nome',
                graduation: b.graduation || 'Sem gradua√ß√£o',
                date: b.date || 'Data n√£o informada',
                dateFormat: b.date ? (b.date.includes('/') ? 'BR (DD/MM/YYYY)' : 'US (YYYY-MM-DD)') : 'Invalid',
                age: calculateAge(b.date) + 1,
                phone: b.phone || 'Tel n√£o informado',
                relationship: b.relationship || 'Relacionamento n√£o informado',
                unit: b.unit || 'Unidade n√£o informada'
            })),
            allBirthdays: birthdays.map(b => ({
                name: b.name || 'Sem nome',
                graduation: b.graduation || 'Sem gradua√ß√£o',
                date: b.date || 'Data n√£o informada',
                dateFormat: b.date ? (b.date.includes('/') ? 'BR (DD/MM/YYYY)' : b.date.includes('-') ? 'US (YYYY-MM-DD)' : 'Invalid') : 'Invalid',
                currentAge: calculateAge(b.date),
                phone: b.phone || 'Tel n√£o informado',
                relationship: b.relationship || 'Relacionamento n√£o informado',
                unit: b.unit || 'Unidade n√£o informada'
            })),
            optimization: {
                messagesPerExecution: 1,
                maxDailyMessages: MAX_DAILY_MESSAGES,
                currentDailyCount: dailyMessageCount,
                twilioLimitReached: twilioLimitReached
            },
            timestamp: new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }),
            checkingFor: new Date(Date.now() + 86400000).toLocaleDateString('pt-BR'),
            version: '2.4.0'
        });
    } catch (error) {
        res.status(500).json({ 
            success: false, 
            error: error.message,
            version: '2.4.0'
        });
    }
});

// Rota de debug ATUALIZADA - Ver todos os dados com detec√ß√£o de formato
app.get('/debug', async (req, res) => {
    try {
        const birthdays = await getBirthdaysFromFirebase();
        
        res.json({
            system: {
                version: '2.4.0',
                optimization: 'Uma mensagem por hor√°rio + Controle Twilio',
                dailyMessages: `${dailyMessageCount}/${MAX_DAILY_MESSAGES}`,
                twilioLimitReached: twilioLimitReached,
                resetTime: '00:00 UTC (21:00 Brasil)'
            },
            firebase: {
                connected: db !== null,
                totalRegistros: birthdays.length
            },
            formatAnalysis: {
                brazilian: birthdays.filter(b => b.date && b.date.includes('/')).length,
                american: birthdays.filter(b => b.date && b.date.includes('-')).length,
                invalid: birthdays.filter(b => !b.date || (!b.date.includes('/') && !b.date.includes('-'))).length
            },
            registros: birthdays.map((b, index) => ({
                indice: index + 1,
                nome: b.name || 'VAZIO',
                graduacao: b.graduation || 'VAZIO',
                data: b.date || 'VAZIO',
                formato_detectado: b.date ? (b.date.includes('/') ? 'BR (DD/MM/YYYY)' : b.date.includes('-') ? 'US (YYYY-MM-DD)' : 'INV√ÅLIDO') : 'VAZIO',
                telefone: b.phone || 'VAZIO',
                relacionamento: b.relationship || 'VAZIO',
                unidade: b.unit || 'VAZIO',
                data_valida: b.date && (b.date.includes('/') || b.date.includes('-')),
                partes_data: b.date ? b.date.split(b.date.includes('/') ? '/' : '-') : [],
                idade_atual: calculateAge(b.date),
                processamento_ok: true
            })),
            tomorrowCheck: {
                date: new Date(Date.now() + 86400000).toLocaleDateString('pt-BR'),
                birthdays: checkTomorrowBirthdays(birthdays).map(b => ({
                    name: b.name,
                    date: b.date,
                    format: b.date.includes('/') ? 'BR' : 'US',
                    age: calculateAge(b.date) + 1
                }))
            },
            timestamp: new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })
        });
    } catch (error) {
        res.status(500).json({
            erro: error.message,
            version: '2.4.0',
            twilioLimitReached: twilioLimitReached
        });
    }
});

// Status completo do sistema ATUALIZADO v2.4.0
app.get('/status', async (req, res) => {
    try {
        const birthdays = await getBirthdaysFromFirebase();
        const tomorrowBirthdays = checkTomorrowBirthdays(birthdays);
        const uptime = process.uptime();
        const memory = process.memoryUsage();
        
        // An√°lise de formatos
        const brFormats = birthdays.filter(b => b.date && b.date.includes('/')).length;
        const usFormats = birthdays.filter(b => b.date && b.date.includes('-')).length;
        const invalidFormats = birthdays.filter(b => !b.date || (!b.date.includes('/') && !b.date.includes('-'))).length;
        
        res.json({
            system: {
                status: 'online',
                version: '2.4.0',
                optimization: 'Uma mensagem por hor√°rio + Controle Twilio',
                platform: 'Render FREE',
                uptime: {
                    seconds: Math.floor(uptime),
                    formatted: `${Math.floor(uptime / 3600)}h ${Math.floor((uptime % 3600) / 60)}m`
                },
                memory: {
                    used: `${Math.round(memory.heapUsed / 1024 / 1024)}MB`,
                    total: `${Math.round(memory.heapTotal / 1024 / 1024)}MB`,
                    external: `${Math.round(memory.external / 1024 / 1024)}MB`
                }
            },
            timezone: {
                brasil: new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }),
                utc: new Date().toISOString(),
                renderTimezone: 'UTC',
                conversion: {
                    '10:50_Brasil': '12:20_UTC',
                    '10:55_Brasil': '12:25_UTC'
                }
            },
            firebase: {
                connected: db !== null,
                totalBirthdays: birthdays.length,
                tomorrowBirthdays: tomorrowBirthdays.length,
                dateFormats: {
                    brazilian: brFormats,
                    american: usFormats,
                    invalid: invalidFormats,
                    supportedFormats: ['DD/MM/YYYY', 'YYYY-MM-DD']
                }
            },
            twilio: {
                configured: !!CONFIG.twilio.accountSid,
                fromNumber: CONFIG.twilio.fromNumber,
                toNumber: CONFIG.twilio.toNumber,
                dailyMessages: `${dailyMessageCount}/${MAX_DAILY_MESSAGES}`,
                limitReached: twilioLimitReached,
                status: twilioLimitReached ? 'BLOCKED' : 'OPERATIONAL',
                resetTime: '00:00 UTC (21:00 Brasil)',
                optimization: 'Controle rigoroso ativo'
            },
            cronJobs: {
                '12:20_UTC': '10:50 Brasil - Verifica√ß√£o 1',
                '12:25_UTC': '10:55 Brasil - Verifica√ß√£o 2',
                '00:00_UTC': 'Reset contador di√°rio + flag Twilio'
            },
            keepAlive: {
                enabled: CONFIG.keepAlive.enabled,
                interval: `${CONFIG.keepAlive.interval / 1000 / 60} minutos`
            },
            nextCheck: {
                date: new Date(Date.now() + 86400000).toLocaleDateString('pt-BR'),
                birthdays: tomorrowBirthdays.map(b => `${b.graduation || 'Sem gradua√ß√£o'} ${b.name || 'Sem nome'} (${b.date.includes('/') ? 'BR' : 'US'} format)`)
            },
            optimization: {
                messagesPerExecution: 1,
                maxSavingsPerExecution: 'Ilimitado',
                economyActive: true,
                dualFormatSupport: true,
                twilioControlActive: true
            }
        });
    } catch (error) {
        res.status(500).json({ 
            success: false, 
            error: error.message,
            timestamp: new Date().toISOString(),
            version: '2.4.0',
            twilioLimitReached: twilioLimitReached
        });
    }
});

// Endpoint para receber webhooks do Twilio (opcional)
app.post('/webhook', (req, res) => {
    console.log('üì® Webhook recebido:', req.body);
    res.status(200).send('OK');
});

// Middleware para rotas n√£o encontradas
app.use('*', (req, res) => {
    res.status(404).json({
        error: 'Endpoint n√£o encontrado',
        availableEndpoints: [
            'GET /',
            'GET /test',
            'GET /test-0920',
            'GET /test-0925',
            'GET /check',
            'GET /birthdays',
            'GET /status',
            'GET /ping',
            'GET /debug',
            'POST /webhook'
        ],
        version: '2.4.0',
        optimization: 'Uma mensagem por hor√°rio + Controle Twilio',
        twilioStatus: twilioLimitReached ? 'BLOCKED' : 'OPERATIONAL',
        timestamp: new Date().toISOString()
    });
});

// üöÄ INICIALIZAR SERVIDOR
async function startServer() {
    try {
        console.log('üéñÔ∏è === INICIANDO SISTEMA PM 24/7 v2.4.0 DUAL FORMAT ===');
        console.log(`üí∞ OTIMIZA√á√ÉO: Uma mensagem por hor√°rio + Controle Twilio`);
        console.log(`üìÖ FORMATOS: DD/MM/YYYY (Brasil) + YYYY-MM-DD (Americano)`);
        console.log(`üåç Timezone: America/Sao_Paulo (Brasil)`);
        console.log(`üñ•Ô∏è Platform: Render FREE (UTC)`);
        console.log(`üìÖ Data/Hora Brasil: ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}`);
        console.log(`üïê Data/Hora UTC: ${new Date().toISOString()}`);
        
        // Inicializar Firebase
        console.log('üî• Conectando ao Firebase...');
        const firebaseConnected = await initializeFirebase();
        
        if (!firebaseConnected) {
            console.log('‚ö†Ô∏è Firebase n√£o conectado, mas servidor continuar√° funcionando');
        }
        
        // Iniciar keep-alive
        startKeepAlive();
        
        // Iniciar servidor
        app.listen(PORT, () => {
            console.log(`\nüöÄ === SERVIDOR ONLINE v2.4.0 ===`);
            console.log(`üåê URL: https://seu-app.onrender.com`);
            console.log(`üîå Porta: ${PORT}`);
            console.log(`üî• Firebase: ${firebaseConnected ? 'Conectado ‚úÖ' : 'Desconectado ‚ùå'}`);
            console.log(`üì± WhatsApp: ${CONFIG.twilio.toNumber}`);
            console.log(`üí∞ Otimiza√ß√£o: 1 mensagem por hor√°rio ‚úÖ`);
            console.log(`üìä Limite di√°rio: ${MAX_DAILY_MESSAGES} mensagens`);
            console.log(`üö´ Controle Twilio: ${twilioLimitReached ? 'BLOQUEADO' : 'ATIVO'} ‚úÖ`);
            console.log(`üìÖ Formatos suportados: DD/MM/YYYY + YYYY-MM-DD ‚úÖ`);
            console.log(`\n‚è∞ CRON JOBS ATIVOS:`);
            console.log(`   üåô 12:20 UTC = 10:50 Brasil (Verifica√ß√£o 1)`);
            console.log(`   üåÖ 12:25 UTC = 10:55 Brasil (Verifica√ß√£o 2)`);
            console.log(`   üîÑ 00:00 UTC = Reset contador + flag Twilio`);
            console.log(`\nüéñÔ∏è Sistema PM v2.4.0 pronto para funcionar 24/7!`);
            console.log(`üìã Pr√≥xima verifica√ß√£o: ${new Date(Date.now() + 86400000).toLocaleDateString('pt-BR')}`);
            console.log(`üí° DUAL FORMAT: Reconhece automaticamente formato da data`);
            console.log(`üõ°Ô∏è CONTROLE TWILIO: Bloqueio autom√°tico se limite atingido`);
            console.log(`\n=== SISTEMA OPERACIONAL v2.4.0 ===\n`);
        });
        
        // Teste inicial (opcional)
        setTimeout(async () => {
            try {
                                console.log('üß™ Executando teste inicial...');
                const birthdays = await getBirthdaysFromFirebase();
                const tomorrowBirthdays = checkTomorrowBirthdays(birthdays);
                
                console.log(`‚úÖ Teste inicial conclu√≠do com sucesso!`);
                console.log(`üìä Total de anivers√°rios AMANH√É: ${tomorrowBirthdays.length}`);
                
                // Contar formatos detectados
                const brFormats = birthdays.filter(b => b.date && b.date.includes('/')).length;
                const usFormats = birthdays.filter(b => b.date && b.date.includes('-')).length;
                
                console.log(`üìÖ Formatos detectados: ${brFormats} BR (DD/MM/YYYY) + ${usFormats} US (YYYY-MM-DD)`);
                
                if (tomorrowBirthdays.length > 0) {
                    console.log(`üéÇ Aniversariantes de amanh√£:`);
                    tomorrowBirthdays.forEach((b, i) => {
                        console.log(`   ${i + 1}. ${b.graduation || 'Sem gradua√ß√£o'} ${b.name || 'Sem nome'} - ${b.date} (${b.date.includes('/') ? 'BR' : 'US'} format)`);
                    });
                }
                
            } catch (error) {
                console.error('‚ùå Erro no teste inicial:', error.message);
            }
        }, 3000);
        
    } catch (error) {
        console.error('‚ùå Erro ao iniciar servidor:', error);
        process.exit(1);
    }
}

// Tratamento de erros n√£o capturados
process.on('uncaughtException', (error) => {
    console.error('‚ùå Erro n√£o capturado:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Promise rejeitada:', reason);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üîÑ Recebido SIGTERM, encerrando servidor...');
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('üîÑ Recebido SIGINT, encerrando servidor...');
    process.exit(0);
});

// üöÄ INICIAR O SISTEMA
startServer();

// Exportar para testes (opcional)
module.exports = app;


